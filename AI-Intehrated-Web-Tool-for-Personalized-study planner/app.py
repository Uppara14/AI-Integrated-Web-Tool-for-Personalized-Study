import osfrom datetime
import datetimefrom flask
import Flask, render_template, request, redirect, url_for, flashfrom flask_login
import login_user, login_required, logout_user, current_user, LoginManagerimport spacyfrom nltk.corpus 
import stopwordsimport nltkfrom models 
import db, User, Profile, Planner  # Import Planner# ----------------- Setup -----------------UPLOAD_FOLDER = "uploads"os.makedirs(UPLOAD_FOLDER, exist_ok=True)# Download NLTK resources if not already downloadednltk.download('punkt')nltk.download('stopwords')stop_words = set(stopwords.words('english'))# Load spaCy English modelnlp = spacy.load("en_core_web_sm")def extract_topics(syllabus_text):    """Extract main topics from syllabus text using spaCy noun chunks."""    doc = nlp(syllabus_text)    topics = [chunk.text.lower().strip() for chunk in doc.noun_chunks if chunk.text.lower().strip() not in stop_words]    return ", ".join(list(set(topics)))  # Remove duplicates# ----------------- Flask App Setup -----------------app = Flask(__name__)app.config['SECRET_KEY'] = 'yoursecretkey'app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDERapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False# Initialize databasedb.init_app(app)# ----------------- Flask-Login Setup -----------------login_manager = LoginManager()login_manager.init_app(app)login_manager.login_view = 'login'@login_manager.user_loaderdef load_user(user_id):    return User.query.get(int(user_id))# ----------------- Routes -----------------@app.route('/')def home():    return render_template("home.html")# ----------------- Authentication -----------------@app.route('/register', methods=['GET', 'POST'])def register():    if request.method == 'POST':        username = request.form.get('username')        password = request.form.get('password')        if User.query.filter_by(username=username).first():            flash("Username already exists!", "danger")            return redirect(url_for('register'))        new_user = User(username=username, password=password)        db.session.add(new_user)        db.session.commit()        flash("Registered successfully!", "success")        return redirect(url_for('login'))    return render_template('register.html')@app.route('/login', methods=['GET', 'POST'])def login():    if request.method == 'POST':        username = request.form.get('username')        password = request.form.get('password')        user = User.query.filter_by(username=username, password=password).first()        if user:            login_user(user)            flash("Logged in successfully!", "success")            return redirect(url_for('profile'))        else:            flash("Invalid credentials!", "danger")            return redirect(url_for('login'))    return render_template('login.html')@app.route('/logout')@login_requireddef logout():    logout_user()    flash("Logged out successfully!", "success")    return redirect(url_for('home'))# ----------------- Profile + Planner Route -----------------@app.route('/profile', methods=['GET', 'POST'])@login_requireddef profile():    if request.method == 'POST':        form_type = request.form.get('form_type')  # Determine which form was submitted        # -------- PROFILE FORM --------        if form_type == 'profile':            title = request.form['title']            subject = request.form['subject']            grade = request.form['grade']            start_date = datetime.strptime(request.form['start_date'], "%Y-%m-%d").date()            end_date = datetime.strptime(request.form['end_date'], "%Y-%m-%d").date()            # Handle uploaded syllabus            syllabus_text = ""            syllabus_file = request.files.get('syllabus')            if syllabus_file:                filepath = os.path.join(app.config['UPLOAD_FOLDER'], syllabus_file.filename)                syllabus_file.save(filepath)                if filepath.endswith(".txt"):                    with open(filepath, "r", encoding="utf-8") as f:                        syllabus_text = f.read()                elif filepath.endswith(".pdf"):                    import pdfplumber                    with pdfplumber.open(filepath) as pdf:                        pages = [page.extract_text() for page in pdf.pages]                        syllabus_text = "\n".join([p for p in pages if p])                elif filepath.endswith(".docx"):                    from docx import Document                    doc = Document(filepath)                    syllabus_text = "\n".join([p.text for p in doc.paragraphs])                else:                    syllabus_text = "File uploaded, but unsupported format."            topics_str = extract_topics(syllabus_text) if syllabus_text.strip() else ""            new_profile = Profile(                title=title,                subject=subject,                grade=grade,                start_date=start_date,                end_date=end_date,                syllabus_text=syllabus_text,                topics=topics_str,                user_id=current_user.id            )            db.session.add(new_profile)            db.session.commit()            flash("Profile and syllabus saved successfully!", "success")        # -------- PLANNER FORM --------        elif form_type == 'planner':            topic = request.form['topic']            scheduled_date = datetime.strptime(request.form['planned_date'], "%Y-%m-%d").date()            new_plan = Planner(                topic=topic,                scheduled_date=scheduled_date,                user_id=current_user.id            )            db.session.add(new_plan)            db.session.commit()            flash("Planner entry added successfully!", "success")        return redirect(url_for('profile'))    # GET request â†’ show all profiles and planner entries    profiles = Profile.query.filter_by(user_id=current_user.id).all()    plans = Planner.query.filter_by(user_id=current_user.id).all()    return render_template("profile.html", profiles=profiles, plans=plans)# ----------------- Run App -----------------if __name__ == "__main__":    with app.app_context():        db.create_all()        print("Database created with User, Profile, and Planner tables!")    app.run(debug=True)
Collapse file
